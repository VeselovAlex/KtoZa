// Generated by CoffeeScript 1.10.0
(function() {
  var Countdown, PollController, Questions, config,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  angular.module('ktoza-respondent', ['ngRoute']);


  /*
   * Countdown -- ????????????????????, ???????????????????????????? ???????????? ?????????????? ?????????????????? ??????????????.
   * ???????????? ???????????????? ??????????????????-???????????????????? <countdown>
   *
   * ??????????????????
   *     to        -- ????????, ???? ?????????????? ?????????????? ????????????
   *     onfinish  -- ????????????????????, ???????????????????? ???? ?????????????????? ??????????????
   */

  Countdown = (function() {
    function Countdown($interval) {
      this.update = bind(this.update, this);
      this.tick = bind(this.tick, this);
      var tick;
      this.delay = Math.ceil((new Date(this.to) - new Date()) / 1000);
      this.update();
      tick = $interval((function(_this) {
        return function() {
          if (_this.delay < 0) {
            $interval.cancel(tick);
            return;
          }
          _this.tick();
          if (_this.delay === 0) {
            $interval.cancel(tick);
            _this.onfinish();
          }
        };
      })(this), 1000);
    }


    /*
     * tick() ???????????????????? ?????? ???????????? ?????????????? ??????????????
     */

    Countdown.prototype.tick = function() {
      this.delay--;
      return this.update();
    };


    /*
     * onfinish() ???????????????????? ???? ???????????????????? ??????????????
     */

    Countdown.prototype.onfinish = function() {};


    /*
     * update() ?????????????????? ???????? days, hours, minutes ?? seconds 
     * ?? ???????????????????????? ?? ?????????????? ???????????????????? ??????????????
     */

    Countdown.prototype.update = function() {
      var hours, minutes;
      minutes = (this.delay - (this.seconds = this.delay % 60)) / 60;
      hours = (minutes - (this.minutes = minutes % 60)) / 60;
      return this.days = (hours - (this.hours = hours % 24)) / 24;
    };

    return Countdown;

  })();

  angular.module('ktoza-respondent').directive('countdown', function() {
    return {
      restrict: "E",
      scope: {
        to: "=",
        onfinish: "&"
      },
      controller: Countdown,
      controllerAs: 'countdown',
      bindToController: true,
      templateUrl: 'partials/countdown.html'
    };
  });


  /*
   * Questions -- ????????????????????, ???????????????????????????? ???????? ?????????????? ??????????????????????
   */

  Questions = (function() {
    function Questions() {
      this.reset = bind(this.reset, this);
      this.submit = bind(this.submit, this);
      this.isSelected = bind(this.isSelected, this);
      this.isAnswered = bind(this.isAnswered, this);
      this.select = bind(this.select, this);
      this.isLast = bind(this.isLast, this);
      this.next = bind(this.next, this);
      this.setActive = bind(this.setActive, this);
      this.isActive = bind(this.isActive, this);
      this.load = bind(this.load, this);
    }

    Questions.prototype.controller = function() {};

    Questions.prototype.activeQuestion = 0;


    /*
     * load(poll) ???????????????????????????? ???????????????????? ?? ?????????????? ???????????? ???????????? [poll]
     */

    Questions.prototype.load = function(poll) {
      this.typeOf = poll.questions.map(function(q) {
        return q.type;
      });
      this.answered = poll.questions.map(function(q) {
        return false;
      });
      this.last = poll.questions.length - 1;
      return this.selection = poll.questions.map(function(q) {
        return q.options.map(function() {
          return [];
        });
      });
    };


    /*
     * isActive(question) ???????????????????? true, ???????? ???????????? ?? ?????????????? [question] 
     * ???????????????? ???????????????? ?? ???????????? ????????????
     */

    Questions.prototype.isActive = function(question) {
      return this.activeQuestion === question;
    };


    /*
     * setActive(question) ???????????????????? ???????????? ?? ?????????????? [question]
     */

    Questions.prototype.setActive = function(question) {
      return this.activeQuestion = question;
    };


    /*
     * next() ???????????????????? ?????????????????? ???? ?????????????? ????????????
     */

    Questions.prototype.next = function() {
      if (this.activeQuestion !== this.last) {
        return this.activeQuestion++;
      }
    };


    /*
     * isLast(question) ???????????????????? true, ???????? ???????????? ?? ?????????????? [question] 
     * ???????????????? ??????????????????
     */

    Questions.prototype.isLast = function(question) {
      return question === this.last;
    };


    /*
     * select(q,o) ???????????????????????? ?????????? ?? ?????????????? [o] ???? ???????????? ?? ?????????????? [q] ?? ????????????
     * ???????? ??????????????. ???????? ???????????? ???????????? ?????? ????????????, ?????????? ????????????????????
     */

    Questions.prototype.select = function(q, o) {
      var ans, j, lastSelection, len, ref, results, type;
      type = this.typeOf[q];
      if (type === 'multi-option') {
        this.selection[q][o] = (this.selection[q][o] + 1) % 2;
        this.answered[q] = false;
        ref = this.selection[q];
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          ans = ref[j];
          if (ans === 1) {
            this.answered[q] = true;
            break;
          } else {
            results.push(void 0);
          }
        }
        return results;
      } else if (type === 'single-option') {
        lastSelection = this.selection[q].indexOf(1);
        if (lastSelection === -1) {
          this.selection[q][o] = 1;
          return this.answered[q] = true;
        } else if (lastSelection === o) {
          this.selection[q][o] = 0;
          return this.answered[q] = false;
        } else {
          this.selection[q][lastSelection] = 0;
          return this.selection[q][o] = 1;
        }
      }
    };


    /*
     * isAnswered(q) ???????????????????? true, ???????? ???? ???????????? ?? ?????????????? [question] 
     * ?????????????????????????????? ??????????
     */

    Questions.prototype.isAnswered = function(q) {
      return this.answered[q];
    };


    /*
     * isSelected(q, o) ???????????????????? true, ???????? ???? ???????????? ?? ?????????????? [question] 
     * ?????????????????????????????? ?????????? ?? ?????????????? [o]
     */

    Questions.prototype.isSelected = function(q, o) {
      return this.selection[q][o] === 1;
    };


    /*
     * __DEBUG VERSION__
     * submit() ???????????????????????? ?????????????????????? ???????????????? ?????????????? ???? ????????????.
     * ???? ?????????????????? ?????????????? ???????????????????????????? ?????????????????????????? ???? ????????
     * ???????????????????? ????????????. ???????? ???????????????? ?????????????????? ????????????????, 
     * ???????????????????? ?????????? [onerror]
     */

    Questions.prototype.submit = function() {
      var answers;
      answers = this.selection.map(function(ans) {
        var res;
        res = [];
        ans.forEach(function(a, i) {
          if (a === 1) {
            return res.push(i);
          }
        });
        return res;
      });
      return console.log(JSON.stringify(answers));
    };

    Questions.prototype.reset = function() {
      this.selection = this.selection.map(function(q) {
        return q.map(function(a) {
          return 0;
        });
      });
      this.setActive(0);
      return this.answered = this.answered.map(function() {
        return false;
      });
    };

    return Questions;

  })();

  angular.module('ktoza-respondent').controller('Questions', Questions);


  /*
   * PollController -- ???????????????????? ????????????, ???????????????????????????? ?????????????????? ???????????? ????????????
   * ?? ?????????????????????? ??????????????????????????. ?????????? ???????????????????????? ???????????????? ?????????? ?????????????????????? 
   * ???????????? (???????????????????????????????? ???? ????????????)
   */

  PollController = (function() {

    /*
     * constructor() -- ??????????????-??????????????????????. ???????????????????????? ?????????????????????? ???????????? 
     * ???????????? ???????????? ?? ??????????????
     */
    function PollController($http, $location) {
      this.$location = $location;
      this.checkLocation = bind(this.checkLocation, this);
      this.register = bind(this.register, this);
      this.isRegistered = bind(this.isRegistered, this);
      $http.get('/api/poll').success((function(_this) {
        return function(data, status) {
          _this.poll = data;
          return _this.state = "loaded";
        };
      })(this)).error((function(_this) {
        return function() {
          return console.log('Bad connection');
        };
      })(this));
    }


    /*
     * state -- c???????????????? ???????????????????? ?????????? ????????????
     *
     * ???????????????????? ????????????????:
     * ""             -- ?????????? ???? ????????????????
     * "loaded"       -- ?????????? ????????????????
     * "error"        -- ???????????? ?????? ???????????????? ????????????
     */

    PollController.prototype.state = "";


    /*
     * poll -- ???????????? ????????????
     */

    PollController.prototype.poll = {};


    /*
     * isRegistered() ???????????????????? true, ???????? ???????????????????????? ???? ?????? ?????????? ??????????????????????????????
     */

    PollController.prototype.isRegistered = function() {
      return this.registered;
    };


    /*
     * register() ???????????????????????? ?????????????????????? ???????????????????????? ???????? ?????????????? ???????? -- ????????
     * ?????????????????????? ?? ???????????????????????? ???? ?????? ?????????? ??????????????????????????????
     */

    PollController.prototype.register = function() {
      if (this.$location.path !== "/register") {
        return;
      }
      if (!this.isRegistered()) {
        console.log('Registration...');
        return this.registered = true;
      }
    };


    /*
     * checkLocation() ?????????????????? ???????????????????????? ???????????????? ???????????????????????? ??????????????????
     * ????????????. ?????? ???????????????????????????? ???????????????????????????? ??????????????????????????
     */

    PollController.prototype.checkLocation = function() {
      var curLoc, loc, now;
      curLoc = this.$location.path();
      loc = "/intro";
      now = new Date();
      if (now > new Date(this.poll.events.registration)) {
        loc = "/register";
      }
      if (now > new Date(this.poll.events.start)) {
        loc = "/poll";
      }
      if (now > new Date(this.poll.events.end)) {
        loc = "/finish";
      }
      if (loc !== curLoc) {
        this.$location.path(loc);
      }
      return loc === curLoc;
    };

    return PollController;

  })();

  angular.module('ktoza-respondent').controller('PollController', PollController);


  /*
   * ???????????????????????? ?????????????? ???????? ????????????????????
   */

  config = function($routeProvider) {
    return $routeProvider.when('/intro', {
      templateUrl: 'partials/intro.html'
    }).when('/register', {
      templateUrl: 'partials/registration.html'
    }).when('/poll', {
      templateUrl: 'partials/questions.html',
      controller: 'Questions as questionsCtrl'
    }).when('/finish', {
      templateUrl: 'partials/finish.html'
    }).when('/stats', {
      template: 'Stats'
    }).otherwise({
      redirectTo: '/intro'
    });
  };

  angular.module('ktoza-respondent').config(config);

}).call(this);
