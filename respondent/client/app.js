// Generated by CoffeeScript 1.10.0
(function() {
  var Poll, app, dataBuf,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  app = angular.module('ktoza-respondent', []);

  dataBuf = {};

  Poll = (function() {
    function Poll($http, $timeout, $interval) {
      this.isCollapsed = bind(this.isCollapsed, this);
      this.collapse = bind(this.collapse, this);
      this.isAnswered = bind(this.isAnswered, this);
      this.numAnswered = bind(this.numAnswered, this);
      this.isApplied = bind(this.isApplied, this);
      this.applySingleOption = bind(this.applySingleOption, this);
      this.applyMultiOption = bind(this.applyMultiOption, this);
      this.apply = bind(this.apply, this);
      this.isCurrentView = bind(this.isCurrentView, this);
      this.setView = bind(this.setView, this);
      this.isRegistered = bind(this.isRegistered, this);
      this.canShowStatistics = bind(this.canShowStatistics, this);
      this.canShowQuestions = bind(this.canShowQuestions, this);
      this.doChangePollState = bind(this.doChangePollState, this);
      $http.get("api/poll", {
        responseType: "json"
      }).then((function(_this) {
        return function(resp) {

          /*
           * Успешное завершение запроса
           */
          var cd, poll, questions;
          poll = resp.data;
          if (poll == null) {
            _this.loaded = false;
            return;
          }
          _this.header.title = poll.title;
          _this.header.caption = poll.caption;
          questions = poll.questions;
          _this.collapsed = questions.map(function(q) {
            return false;
          });
          _this.questionTypes = questions.map(function(q) {
            return q.type;
          });
          _this.questionsAnswered = questions.map(function(q) {
            return false;
          });
          _this.applies = questions.map(function(q) {
            return q.options.map(function(o) {
              return 0;
            });
          });
          dataBuf.questions = questions;
          _this.events = {};
          _this.events.registrationAt = new Date(poll.events.registration);
          _this.events.startAt = new Date(poll.events.start);
          _this.events.endAt = new Date(poll.events.end);
          _this.loaded = true;
          _this.doChangePollState($timeout);
          return cd = $interval(function() {
            _this.countdown.update(_this.countdown.raw - 1);
            if (_this.countdown.raw < -1) {
              return $interval.cancel(cd);
            }
          }, 1000);
        };
      })(this));
      this.loadStat = (function(_this) {
        return function() {
          return $http.get("api/stats", {
            responseType: "json"
          }).then(function(resp) {

            /*
             * Успешное завершение запроса
             */
            var statistics;
            statistics = resp.data;
            statistics.date = new Date(statistics.date);
            return dataBuf.statistics = statistics;
          });
        };
      })(this);
      this.checkReg = (function(_this) {
        return function() {
          return $http.get("api/register", {
            responseType: "json"
          }).then(function(resp) {
            return _this.reg = resp.data;
          });
        };
      })(this);
      this.register = (function(_this) {
        return function() {
          return $http.post("api/register").then(function() {
            return _this.reg = true;
          }, function() {
            return _this.reg = false;
          });
        };
      })(this);
      this.checkReg();
      this.submit = (function(_this) {
        return function() {
          var toSubmit;
          toSubmit = _this.applies.map(function(a) {
            var ans;
            ans = [];
            a.forEach(function(opt, num) {
              if (opt === 1) {
                return ans.push(num);
              }
            });
            return ans;
          });
          return $http.post("api/submit", toSubmit).then(function() {
            console.log('Submitted');
            _this.reg = false;
            return _this.setView('intro');
          }, function() {
            console.log('Not submitted');
            return _this.badSubmission = true;
          });
        };
      })(this);
      this.setView('intro');
    }

    Poll.prototype.pollState = "before";

    Poll.prototype.doChangePollState = function($timeout) {
      var end, now, reg, start;
      now = new Date();
      reg = this.events.registrationAt - now;
      start = this.events.startAt - now;
      end = this.events.endAt - now;
      if (end <= 0) {
        this.pollState = "ended";
        this.countdown.update(-1);
        this.loadStat();
      } else if (start <= 0) {
        this.pollState = "started";
        this.countdown.update(Math.ceil(end / 1000));
        $timeout((function(_this) {
          return function() {
            _this.pollState = "ended";
            _this.countdown.update(-1);
            return _this.loadStat();
          };
        })(this), end);
      } else if (reg <= 0) {
        this.countdown.update(Math.ceil(start / 1000));
        this.pollState = "registration";
        $timeout((function(_this) {
          return function() {
            _this.pollState = "ended";
            _this.countdown.update(-1);
            return _this.loadStat();
          };
        })(this), end);
        $timeout((function(_this) {
          return function() {
            _this.pollState = "started";
            return _this.countdown.update(Math.ceil((_this.events.endAt - new Date()) / 1000));
          };
        })(this), start);
      } else {
        this.pollState = "before";
        this.countdown.update(Math.ceil(reg / 1000));
        $timeout((function(_this) {
          return function() {
            _this.pollState = "ended";
            _this.countdown.update(-1);
            return _this.loadStat();
          };
        })(this), end);
        $timeout((function(_this) {
          return function() {
            _this.pollState = "started";
            return _this.countdown.update(Math.ceil((_this.events.endAt - new Date()) / 1000));
          };
        })(this), start);
        $timeout((function(_this) {
          return function() {
            _this.pollState = "registration";
            return _this.countdown.update(Math.ceil((_this.events.startAt - new Date()) / 1000));
          };
        })(this), reg);
      }
    };

    Poll.prototype.canShowQuestions = function() {
      return this.loaded && this.isRegistered() && (this.pollState === "started");
    };

    Poll.prototype.canShowStatistics = function() {
      return this.loaded && (this.pollState === "ended");
    };

    Poll.prototype.isRegistered = function() {
      return this.reg;
    };

    Poll.prototype.countdown = {
      raw: 0,
      days: 0,
      minutes: 0,
      seconds: 0,
      update: function(raw) {
        var hours, minutes;
        this.raw = raw;
        minutes = (raw - (this.seconds = raw % 60)) / 60;
        hours = (minutes - (this.minutes = minutes % 60)) / 60;
        this.days = (hours - (this.hours = hours % 24)) / 24;
        return this.timeString = this.days + " д. " + this.hours + " ч. " + this.minutes + " м. " + this.seconds + " с.";
      }
    };

    Poll.prototype.currentView = "intro";

    Poll.prototype.setView = function(view) {
      if (this.currentView === view) {
        return;
      }
      this.currentView = view;
      switch (view) {
        case "intro":
          this.questions = [];
          return this.statistics = {};
        case "questions":
          return this.questions = dataBuf.questions;
        case "stats":
          this.questions = dataBuf.questions;
          return this.statistics = dataBuf.statistics;
        default:
          return this.currentView = "intro";
      }
    };

    Poll.prototype.isCurrentView = function(view) {
      return this.currentView === view;
    };

    Poll.prototype.apply = function(q, o) {
      var type;
      type = this.questionTypes[q];
      if (type === "single-option") {
        return this.applySingleOption(q, o);
      } else if (type === "multi-option") {
        return this.applyMultiOption(q, o);
      }
    };

    Poll.prototype.applyMultiOption = function(q, o) {
      this.applies[q][o] = (this.applies[q][o] + 1) % 2;
      return this.questionsAnswered[q] = this.applies[q].indexOf(1) !== -1;
    };

    Poll.prototype.applySingleOption = function(q, o) {
      var last;
      last = this.applies[q].indexOf(1);
      if (last !== -1) {
        this.applies[q][last] = 0;
        this.questionsAnswered[q] = false;
      }
      if (o !== last) {
        this.applies[q][o] = 1;
        return this.questionsAnswered[q] = true;
      }
    };

    Poll.prototype.isApplied = function(q, o) {
      return this.applies[q][o] === 1;
    };

    Poll.prototype.questionsAnswered = [];

    Poll.prototype.numAnswered = function() {
      return this.questionsAnswered.filter(function(x) {
        return x;
      }).length;
    };

    Poll.prototype.isAnswered = function(q) {
      return this.questionsAnswered[q];
    };

    Poll.prototype.collapsed = [];

    Poll.prototype.collapse = function(q) {
      return this.collapsed[q] = !this.collapsed[q];
    };

    Poll.prototype.isCollapsed = function(q) {
      return this.collapsed[q];
    };

    Poll.prototype.header = {};

    return Poll;

  })();

  app.controller("Poll", Poll);

}).call(this);
